---
import { getCollection, getEntry } from "astro:content";
import { marked } from "marked";
import DOMPurify from "isomorphic-dompurify";
import dayjs, { type Dayjs } from "dayjs";
import { formatTime, calculateAbsoluteDate } from "../utils/dateUtils";
import { Badge } from "@astrojs/starlight/components";
import { transformContentData } from "../utils/contentUtils";

interface Reading {
  link: string;
  name: string;
  grad_only?: boolean;
  optional?: boolean;
}

interface BaseEvent {
  type: string;
  title: string;
  date: Dayjs;
  notes?: string;
  tentative?: boolean;
}

interface ExamEvent extends BaseEvent {
  type: "exam";
  content: string;
}

interface HomeworkEvent extends BaseEvent {
  type: "homework release" | "homework due";
  slug: string;
}

interface LectureEvent extends BaseEvent {
  type: "lecture";
  slug: string;
  readings?: Reading[];
}

const examsCollection = await getCollection("exams");
const exams = examsCollection
  .filter((entry) => entry.data.relative_date)
  .map((entry) => {
    const data = transformContentData(entry.data);
    return {
      type: "exam" as const,
      title: data.title,
      date: calculateAbsoluteDate(entry.data.relative_date!),
      content: data.content,
      notes: data.notes,
      tentative: data.tentative,
    } satisfies ExamEvent;
  });

const homeworks = (
  await getCollection("docs", (entry) => entry.id.startsWith("homework"))
).flatMap((entry) => {
  const data = transformContentData(entry.data);
  const events = [];
  if (data.relative_release) {
    events.push({
      slug: entry.id,
      type: "homework release" as const,
      title: data.title,
      date: calculateAbsoluteDate(data.relative_release),
      notes: data.notes,
      tentative: data.tentative,
    } satisfies HomeworkEvent);
  }
  if (data.relative_due) {
    events.push({
      slug: entry.id,
      type: "homework due" as const,
      title: data.title,
      date: calculateAbsoluteDate(data.relative_due),
      notes: data.notes,
      tentative: data.tentative,
    } satisfies HomeworkEvent);
  }
  return events;
});

const lecturesCollection = await getCollection("docs", (entry) =>
  entry.id.startsWith("lecture"),
);
const lectures = lecturesCollection
  .filter((entry) => entry.data.relative_date)
  .map((entry) => {
    const data = transformContentData(entry.data);
    return {
      slug: entry.id,
      type: "lecture" as const,
      title: data.title,
      date: calculateAbsoluteDate(entry.data.relative_date!),
      readings: data.readings,
      notes: data.notes,
      tentative: data.tentative,
    } satisfies LectureEvent;
  });

const events = [...exams, ...homeworks, ...lectures].sort(
  (a, b) => a.date.valueOf() - b.date.valueOf(),
);

// events is already sorted, so just check if the last event is in the past
// class concludes on the Friday of finals week

const concluded = calculateAbsoluteDate({
  week: 16,
  day: "Friday",
  time: "17:00:00",
}).isBefore(dayjs());
---

{
  !concluded && (
    <span class="action primary" id="jumpToDateButton">
      Jump to Nearest Date
    </span>
    <span class="action primary" id="downloadCsvButton">
        Download Calendar CSV
    </span>
  )
}
<div class="not-content ml-4 flex items-center lg:ml-0 lg:justify-center">
  <table class="border-separate border-spacing-y-2 text-sm">
    <thead>
      <tr>
        <th class="hidden lg:table-cell lg:min-w-[8rem]">Type</th>
        <th class="hidden lg:table-cell">Date</th>
        <th class="hidden lg:table-cell">Topic</th>
        <th class="hidden lg:table-cell">Content</th>
        <th class="hidden lg:table-cell">Notes</th>
      </tr>
    </thead>
    <tbody>
      {
        events.map((event) => (
          <tr
            class:list={[
              {
                "!bg-[var(--sl-color-accent-low)]": event?.tentative,
              },
              "tr-class",
            ]}
            data-date={event.date.toISOString()}>
            <td class="td-class">
              {event?.tentative && <Badge text="Tentative" variant="tip" />}
              <div>{event.type}</div>
            </td>
            <td class="td-class">{formatTime(event.date)}</td>
            <td class="td-class">
              {(event.type === "homework release" ||
                event.type === "homework due") && (
                <a href={`/${event.slug}/`}>{event.title}</a>
              )}
              {event.type === "exam" && event.title}
              {event.type === "lecture" && event.title}
            </td>
            <td class="td-class">
              {event.type === "exam" && event.content}
              {event.type === "lecture" && event.readings && (
                <ul>
                  {event.readings.map((reading: Reading) => (
                    <li>
                      <a href={reading.link} target="_blank">
                        {reading.name}
                      </a>
                      {reading.grad_only && <span title="grad only">üßë‚Äçüéì</span>}
                      {reading.optional && <span title="not on quiz">üìµ</span>}
                    </li>
                  ))}
                </ul>
              )}
            </td>
            <td class="td-class">
              {event.notes && (
                <Fragment
                  set:html={marked(event.notes, { async: true })
                    .then((r) => DOMPurify.sanitize(r))
                    .catch((e) => `Markdown parse failure: ${e}.`)}
                />
              )}
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>

  <style>
    @reference "tailwindcss";

    .td-class {
      @apply border-0 px-4 py-3  lg:first:rounded-t-none lg:first:rounded-bl-lg lg:first:rounded-tl-lg lg:last:rounded-b-none lg:last:rounded-br-lg lg:last:rounded-tr-lg;
    }

    .tr-class {
      @apply mb-4 flex flex-col rounded-lg odd:bg-[var(--sl-color-gray-6)] even:bg-[var(--sl-color-gray-7)] lg:table-row;
    }
    .action {
      display: inline-block;
      cursor: pointer;
      margin-top: 1rem;
      margin-bottom: 1rem;
      gap: 0.5em;
      align-items: center;
      border-radius: 999rem;
      padding: 0.5rem 1.125rem;
      color: var(--sl-color-white);
      line-height: 1.1875;
      text-decoration: none;
      font-size: var(--sl-text-sm);
    }
    .action.primary {
      background: var(--sl-color-text-accent);
      color: var(--sl-color-black);
    }
    ul {
      padding-left: 0.5rem;
    }
    @keyframes fadeHighlight {
      from {
        background-color: var(--sl-color-accent);
      }
    }

    .highlight {
      animation: fadeHighlight 2s ease-out forwards;
    }
  </style>

  <script>
    const jumpToDate = () => {
      const today = +new Date();
      const rows = document.querySelectorAll("tr[data-date]");
      const nearestRow = Array.from(rows)
        .filter(
          (row) => +new Date(row.getAttribute("data-date") ?? today) > today,
        ) // Filter out past events
        .sort((a, b) => {
          return (
            Math.abs(today - +new Date(a.getAttribute("data-date") ?? today)) -
            Math.abs(today - +new Date(b.getAttribute("data-date") ?? today)) // Sort by diff between today's date and event's date
          );
        })[0] as HTMLElement; // Return first item (nearest date)
      if (!nearestRow) return;
      const originalColor = window.getComputedStyle(nearestRow).backgroundColor;
      nearestRow.style.backgroundColor = originalColor; // Set original color inline
      nearestRow.classList.add("highlight");

      setTimeout(() => {
        nearestRow.classList.remove("highlight");
        nearestRow.style.backgroundColor = ""; // Revert to stylesheet color
      }, 2000);

      nearestRow.scrollIntoView();
    };

    document
      .querySelector("#jumpToDateButton")
      ?.addEventListener("click", () => {
        jumpToDate();
      });
  </script>
  <script>
    // Helper function to convert dates and times to calendar format
    function formatDateCSV(str: string, endTime: boolean) {
      const cleanStr = str.replace(' at ', ' ');
      const date = new Date(cleanStr);
      const pad = (n: number) => n.toString().padStart(2, '0');
      const year = date.getFullYear();
      const month = pad(date.getMonth() + 1); // +1 because it's 0 for january
      const day = pad(date.getDate());
      let hours = date.getHours();
      // Make every event 1 hour long
      if (endTime) {
        hours += 1;
      }
      const minutes = pad(date.getMinutes());
      const amOrPm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      if (hours === 0) hours = 12;
      const formattedHours = pad(hours);
      return `${month}/${day}/${year} ${formattedHours}:${minutes} ${amOrPm}`;
    }

    const sendCSV = () => {
      // This is the csv format the google calendar expects
      const csvData = ['Subject,Start Date,All Day Event,Start Time,End Time,Location,Description'];

      // Finds all table rows representing events by searching for rows with a data-date attribute in the live DOM
      const rows = document.querySelectorAll("tr[data-date]");
      const dataArray = [];

      for (let i = 0; i < rows.length; i++) {
        // This lets me access each cell from the incrementing rows
        const cells = rows[i].querySelectorAll(".td-class");

        dataArray.push("\"" + cells[0].textContent.trim() + ': ' + cells[2].textContent.trim() + "\""); // Combines then pushes the type and topic to be used for calendar subject
        dataArray.push(formatDateCSV(cells[1].textContent.split(",").slice(1).join(",").trim(), false).substring(0, 10)); // Pushes the date in calendar format
        dataArray.push(""); // For all day event
        dataArray.push(formatDateCSV(cells[1].textContent.split(",").slice(1).join(",").trim(), false).split(' ').slice(1).join(' ')); // Gets the start time in calendar format and pushes it
        dataArray.push(formatDateCSV(cells[1].textContent.split(",").slice(1).join(",").trim(), true).split(' ').slice(1).join(' ')); // Gets the end time in calendar format and pushes it
        dataArray.push(""); // For location
        dataArray.push(""); // For description

        // Connects the pushed strings
        if ((i + 1) % 1 === 0) {
          csvData.push(dataArray.join(','));
          dataArray.length = 0; // resets array
        }
      }

      // Combine all lines
      const csvString = csvData.join('\n');

      // Creates blob with csv and the download element
      const blob = new Blob([csvString], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'calendar-CS484.csv';
      a.click();
      URL.revokeObjectURL(url);
    };

    document
      .querySelector("#downloadCsvButton")
      ?.addEventListener("click", () => {
        sendCSV();
      });
  </script>
</div>
